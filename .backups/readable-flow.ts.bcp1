import { isAsyncGeneratorFunction } from '@xstd/async-generator';
import { rejectPromiseWhenSignalIsAborted } from '@xstd/async-task';
import { listen } from '@xstd/disposable';
import {
  FilterFunction,
  FilterFunctionWithSubType,
  MapFilterFunction,
  MapFunction,
} from '@xstd/functional';
import { SharedResource, SharedResourceFactory, SharedResourceLike } from '@xstd/shared-resource';
import { asyncIteratorReturnAll } from '../../../shared/functions/.private/async-iterator-return-all.js';
import { iteratorReturnAll } from '../../../shared/functions/.private/iterator-return-all.js';
import { TerminalError } from '../../../shared/terminal-error.js';
import { FlowFactory } from '../../base/flow-factory/flow-factory.js';
import { SyncWriteToFlowReaderBridge } from '../../bridge/sync-write-to-flow-reader-bridge.js';
import { PushToPullOptions } from '../../bridge/types/push-to-pull-options.js';
import { FlowReader } from '../flow-reader/flow-reader.js';
import { ReadableFlowFlatMapErrorFunction } from './types/methods/readable-flow-flat-map-error-function.js';
import { ReadableFlowFlatMapReadFunction } from './types/methods/readable-flow-flat-map-read-function.js';
import { ReadableFlowSource } from './types/readable-flow-source.js';

export class ReadableFlow<GValue> extends FlowFactory<FlowReader<GValue>> {
  /**
   * Creates a `ReadableFlow` from:
   *  - a `ReadableFlow`
   *  - or an `AsyncGeneratorFunction`
   *  - or an `AsyncIterable`
   *  - or an `Iterable`
   *  - or a `Promise`
   */
  static from<GValue>(input: ReadableFlowSource<GValue>): ReadableFlow<GValue> {
    if (input instanceof ReadableFlow) {
      return input;
    }

    if (isAsyncGeneratorFunction<[signal: AbortSignal], GValue, void, void>(input)) {
      return this.#fromAsyncGeneratorFunction<GValue>(input);
    }

    if (Symbol.asyncIterator in input) {
      return this.#fromAsyncIterable<GValue>(input);
    }

    if (Symbol.iterator in input) {
      return this.#fromIterable<GValue>(input);
    }

    if (input instanceof Promise) {
      return this.#fromPromise<GValue>(input);
    }

    throw new Error('Not a valid ReadableFlowSource.');
  }

  static #fromAsyncGeneratorFunction<GValue>(
    fnc: (signal: AbortSignal) => AsyncIterator<GValue, void, void>,
  ): ReadableFlow<GValue> {
    return new ReadableFlow<GValue>((): FlowReader<GValue> => {
      const controller = new AbortController();
      const iterator: AsyncIterator<GValue, void, void> = fnc(controller.signal);

      return new FlowReader<GValue>(
        async (signal: AbortSignal): Promise<GValue> => {
          using _signalListener: Disposable = listen(signal, 'abort', (): void => {
            controller.abort(signal.reason);
          });

          let result: IteratorResult<GValue>;

          try {
            result = await iterator.next();
          } catch (error: unknown) {
            throw TerminalError.dirty({ cause: error });
          }

          if (result.done) {
            throw TerminalError.clean();
          }

          return result.value;
        },
        (): Promise<void> => {
          return asyncIteratorReturnAll(iterator);
        },
      );
    });
  }

  static #fromAsyncIterable<GValue>(iterable: AsyncIterable<GValue>): ReadableFlow<GValue> {
    return this.#fromAsyncGeneratorFunction(iterable[Symbol.asyncIterator]);
  }

  static #fromIterable<GValue>(iterable: Iterable<GValue>): ReadableFlow<GValue> {
    return new ReadableFlow<GValue>((): FlowReader<GValue> => {
      const iterator: Iterator<GValue> = iterable[Symbol.iterator]();

      return new FlowReader<GValue>(
        (): GValue => {
          let result: IteratorResult<GValue>;

          try {
            result = iterator.next();
          } catch (error: unknown) {
            throw TerminalError.dirty({ cause: error });
          }

          if (result.done) {
            throw TerminalError.clean();
          }

          return result.value;
        },
        (): void => {
          iteratorReturnAll(iterator);
        },
      );
    });
  }

  static #fromPromise<GValue>(promise: Promise<GValue>): ReadableFlow<GValue> {
    return new ReadableFlow<GValue>((): FlowReader<GValue> => {
      let done: boolean = false;

      return new FlowReader<GValue>(
        async (): Promise<GValue> => {
          if (done) {
            throw TerminalError.clean();
          }

          try {
            return await promise;
          } catch (error: unknown) {
            throw TerminalError.dirty({ cause: error });
          } finally {
            done = true;
          }
        },
        (): void => {},
      );
    });
  }

  // /**
  //  * Creates an `ReadableFlow` from a function returning a `ReadableStream`.
  //  */
  // static fromReadableStreamFactory<GValue>(
  //   factory: ReadableStreamFactory<GValue>,
  // ): ReadableFlow<GValue> {
  //   return new ReadableFlow<GValue>(async (signal?: AbortSignal): Promise<FlowReader<GValue>> => {
  //     const reader: ReadableStreamDefaultReader<GValue> = (await factory(signal)).getReader();
  //
  //     return new FlowReader<GValue>(
  //       async (signal: AbortSignal): Promise<GValue> => {
  //         using _signalListener: Disposable = listen(signal, 'abort', (): void => {
  //           reader.cancel(signal.reason);
  //         });
  //
  //         const { done, value } = await reader.read();
  //
  //         if (done) {
  //           throw new CompleteError();
  //         }
  //
  //         return value;
  //       },
  //       (reason: unknown): Promise<void> => {
  //         return reader.cancel(reason);
  //       },
  //     );
  //   });
  // }

  /**
   * Creates an `ReadableFlow` from an `EventTarget`.
   */
  static when<GEvent extends Event>(
    target: EventTarget,
    type: string,
    options?: PushToPullOptions,
  ): ReadableFlow<GEvent> {
    return new ReadableFlow<GEvent>((): FlowReader<GEvent> => {
      const bridge = new SyncWriteToFlowReaderBridge<GEvent>({
        ...options,
        close: (reason?: unknown): void => {
          stopListener[Symbol.dispose]();
          bridge.close(reason);
        },
      });

      const stopListener: Disposable = listen(target, type, (event: Event): void => {
        bridge.write(event as GEvent);
      });

      return bridge.reader;
    });
  }

  /**
   * Returns a new `ReadableFlow` whose `read` values are _mapped_ using the function `mapFnc`.
   *
   * @example: multiply values by `2`
   *
   * ```ts
   * await ReadableFlow.from([1, 2, 3]).map(v => v * 2).toArray(); // [2, 4, 6]
   * ```
   */
  map<GNewValue>(mapFnc: MapFunction<GValue, GNewValue>): ReadableFlow<GNewValue> {
    return new ReadableFlow<GNewValue>(
      async (signal?: AbortSignal): Promise<FlowReader<GNewValue>> => {
        const reader: FlowReader<GValue> = await this.open(signal);

        return new FlowReader<GNewValue>(
          async (): Promise<GNewValue> => {
            return mapFnc(await reader.read());
          },
          (reason: unknown): Promise<void> => {
            return reader.close(reason);
          },
        );
      },
    );
  }

  /**
   * Returns a new `ReadableFlow` whose `next` values are _filtered_ using the function `filterFnc`.
   *
   * @example: keeps only even values
   *
   * ```ts
   * await ReadableFlow.from([1, 2, 3, 4]).filter(v => v % 2 === 0).toArray(); // [2, 4]
   * ```
   */
  filter<GNewValue extends GValue>(
    filterFnc: FilterFunctionWithSubType<GValue, GNewValue>,
  ): ReadableFlow<GNewValue>;
  filter(filterFnc: FilterFunction<GValue>): ReadableFlow<GValue>;
  filter(filterFnc: FilterFunction<GValue>): ReadableFlow<GValue> {
    return new ReadableFlow<GValue>(async (signal?: AbortSignal): Promise<FlowReader<GValue>> => {
      const reader: FlowReader<GValue> = await this.open(signal);

      return new FlowReader<GValue>(
        async (): Promise<GValue> => {
          while (true) {
            const value: GValue = await reader.read();
            if (filterFnc(value)) {
              return value;
            }
          }
        },
        (reason: unknown): Promise<void> => {
          return reader.close(reason);
        },
      );
    });
  }

  /**
   * TODO doc
   * @experimental
   */
  mapFilter<GNewValue>(
    mapFilterFnc: MapFilterFunction<GValue, GNewValue>,
  ): ReadableFlow<GNewValue> {
    return new ReadableFlow<GNewValue>(
      async (signal?: AbortSignal): Promise<FlowReader<GNewValue>> => {
        const reader: FlowReader<GValue> = await this.open(signal);

        return new FlowReader<GNewValue>(
          async (): Promise<GNewValue> => {
            while (true) {
              const value: GNewValue | null = mapFilterFnc(await reader.read());
              if (value !== null) {
                return value;
              }
            }
          },
          (reason: unknown): Promise<void> => {
            return reader.close(reason);
          },
        );
      },
    );
  }

  /**
   * TODO doc
   * Returns a new `ReadableFlow` (named `output`) following this algorithm:
   *
   * 1. await `this.read()`
   * 2. when resolved, convert the return of this function into an opened `ReadableFlow` (named `innerReader`),
   *   and `output` return the values sent by `innerReader`.
   * 3. if `innerReader` _completes_, then loop on (1).
   *
   *
   * @example
   *
   * ```ts
   * await ReadableFlow.from([1, 2]).flatMap(v => ReadableFlow.from([`${v}-a`, `${v}-b`])).toArray(); // ['1-a', '1-b', '2-a', '2-b']
   * ```
   */
  flatMap(readFnc?: undefined, errorFnc?: undefined): ReadableFlow<GValue>;
  flatMap<GNewValue>(
    readFnc: ReadableFlowFlatMapReadFunction<GValue, GNewValue>,
    errorFnc?: undefined,
  ): ReadableFlow<GNewValue>;
  flatMap<GNewValue>(
    readFnc: undefined,
    errorFnc: ReadableFlowFlatMapErrorFunction<GNewValue>,
  ): ReadableFlow<GValue | GNewValue>;
  flatMap<GNewValue>(
    readFnc: ReadableFlowFlatMapReadFunction<GValue, GNewValue>,
    errorFnc: ReadableFlowFlatMapErrorFunction<GNewValue>,
  ): ReadableFlow<GNewValue>;
  flatMap<GNewValue>(
    readFnc: ReadableFlowFlatMapReadFunction<GValue, GNewValue> | undefined,
    errorFnc: ReadableFlowFlatMapErrorFunction<GNewValue> | undefined,
  ): ReadableFlow<GValue | GNewValue> {
    if (readFnc === undefined && errorFnc === undefined) {
      return this;
    }

    return new ReadableFlow<GValue | GNewValue>(
      async (signal?: AbortSignal): Promise<FlowReader<GValue | GNewValue>> => {
        const reader: FlowReader<GValue> = await this.open(signal);
        let innerReader: FlowReader<GNewValue> | undefined;
        let isTerminal: boolean = false;

        return new FlowReader<GValue | GNewValue>(
          async (): Promise<GValue | GNewValue> => {
            while (true) {
              if (innerReader === undefined) {
                let value!: GValue;
                let errored: boolean = false;
                let error!: unknown;

                try {
                  value = await reader.read();
                } catch (readerError: unknown) {
                  errored = true;
                  error = readerError;
                }

                let innerReadableSource: ReadableFlowSource<GNewValue>;

                if (errored) {
                  if (error instanceof TerminalError) {
                    isTerminal = true;
                  }

                  if (errorFnc === undefined) {
                    throw error;
                  }

                  try {
                    innerReadableSource = errorFnc(error);
                  } catch (error: unknown) {
                    if (error instanceof TerminalError) {
                      throw error;
                    }
                    // reportError(error);
                    throw TerminalError.dirty({ cause: error });
                  }
                } else {
                  if (readFnc === undefined) {
                    return value;
                  }

                  try {
                    innerReadableSource = readFnc(value);
                  } catch (error: unknown) {
                    if (error instanceof TerminalError) {
                      throw error;
                    }
                    // reportError(error);
                    throw TerminalError.dirty({ cause: error });
                  }
                }

                const innerReadable: ReadableFlow<GNewValue> =
                  ReadableFlow.from<GNewValue>(innerReadableSource);

                innerReader = await innerReadable.open(signal);
              }

              try {
                return await innerReader.read();
              } catch (error: unknown) {
                if (!(error instanceof TerminalError)) {
                  throw error;
                }

                try {
                  await innerReader.close();
                } finally {
                  innerReader = undefined;

                  if (isTerminal) {
                    throw error;
                  }
                }
              }
            }
          },
          async (reason: unknown): Promise<void> => {
            try {
              if (innerReader !== undefined) {
                await innerReader.close(reason);
              }
            } finally {
              await reader.close(reason);
            }

            // const stack = new AsyncDisposableStack();
            // stack.use(reader);
            // if (innerReader !== undefined) {
            //   stack.use(innerReader);
            // }
            // await stack.disposeAsync();

            // if (innerReader !== undefined) {
            //   try {
            //     await innerReader.close(reason);
            //   } catch (innerReaderError: unknown) {
            //     try {
            //       await reader.close(reason);
            //       return;
            //     } catch (readerError: unknown) {
            //       throw new SuppressedError(readerError, innerReaderError);
            //     }
            //   }
            // }
            //
            // await reader.close(reason);
          },
        );
      },
    );
  }

  /**
   * TODO doc
   * @experimental
   */
  finally(finallyFnc: () => PromiseLike<void> | void): ReadableFlow<GValue> {
    return new ReadableFlow<GValue>(async (signal?: AbortSignal): Promise<FlowReader<GValue>> => {
      const reader: FlowReader<GValue> = await this.open(signal);

      return new FlowReader<GValue>(
        (): Promise<GValue> => {
          return reader.read();
        },
        async (reason: unknown): Promise<void> => {
          try {
            await finallyFnc();
          } finally {
            await reader.close(reason);
          }
        },
      );
    });
  }

  /**
   * TODO doc
   * @experimental
   */
  take(count: number): ReadableFlow<GValue> {
    return new ReadableFlow<GValue>(async (signal?: AbortSignal): Promise<FlowReader<GValue>> => {
      const reader: FlowReader<GValue> = await this.open(signal);

      return new FlowReader<GValue>(
        async (): Promise<GValue> => {
          if (count <= 0) {
            throw TerminalError.clean();
          }
          const value: GValue = await reader.read();
          count--;
          return value;
        },
        (reason: unknown): Promise<void> => {
          return reader.close(reason);
        },
      );
    });
  }

  // /**
  //  * TODO doc
  //  * @experimental
  //  */
  // takeUntil(value: ReadableFlowSource<any>): ReadableFlow<GValue> {
  //   return new ReadableFlow<GValue>(async (signal?: AbortSignal): Promise<FlowReader<GValue>> => {
  //     interface GMultiAsyncFlowFactoryItems {
  //       readonly notifier: ReadableFlow<any>;
  //       readonly reader: ReadableFlow<GValue>;
  //     }
  //
  //     type GMultiAsyncFlowItems =
  //       AsyncFlowFactoryCollectionItemsToAsyncFlowCollectionItems<GMultiAsyncFlowFactoryItems>;
  //
  //     const multiAsyncFlow: AsyncFlowCollection<GMultiAsyncFlowItems> =
  //       await new AsyncFlowFactoryCollection<GMultiAsyncFlowFactoryItems>({
  //         notifier: ReadableFlow.from(value),
  //         reader: this,
  //       }).open(signal);
  //
  //     const { notifier, reader } = multiAsyncFlow.items;
  //
  //     let notifierPromise: Promise<never>;
  //
  //     const untilNotifierNext = (): Promise<never> => {
  //       if (notifierPromise === undefined) {
  //         notifierPromise = notifier.next().then(
  //           (): never => {
  //             throw new CompleteError();
  //           },
  //           (error: unknown): never | Promise<never> => {
  //             if (error instanceof CompleteError) {
  //               return Promise.withResolvers<never>().promise; // never ending promise
  //             } else {
  //               throw new CompleteError();
  //             }
  //           },
  //         );
  //       }
  //
  //       return notifierPromise;
  //     };
  //
  //     return new FlowReader<GValue>(
  //       (): Promise<GValue> => {
  //         return Promise.race([reader.next(), untilNotifierNext()]);
  //       },
  //       (reason: unknown): Promise<void> => {
  //         return multiAsyncFlow.close(reason);
  //       },
  //     );
  //   });
  // }

  /**
   * TODO doc
   * @experimental
   */
  drop(count: number): ReadableFlow<GValue> {
    return new ReadableFlow<GValue>(async (signal?: AbortSignal): Promise<FlowReader<GValue>> => {
      const reader: FlowReader<GValue> = await this.open(signal);

      return new FlowReader<GValue>(
        async (): Promise<GValue> => {
          while (count > 0) {
            await reader.read();
            count--;
          }
          return reader.read();
        },
        (reason: unknown): Promise<void> => {
          return reader.close(reason);
        },
      );
    });
  }

  /**
   * TODO doc
   * @experimental
   */
  share({
    bufferSize = Number.POSITIVE_INFINITY,
    windowTime = Number.POSITIVE_INFINITY,
  }: PushToPullOptions = {}): ReadableFlow<GValue> {
    bufferSize = Math.max(0, bufferSize);
    windowTime = Math.max(0, windowTime);

    interface CachedValue<GValue> {
      readonly value: GValue;
      readonly expirationDate: number;
    }

    const sharedFlowReaderFactory: SharedResourceFactory<FlowReader<GValue>> =
      new SharedResourceFactory<FlowReader<GValue>>(
        async (signal?: AbortSignal): Promise<SharedResourceLike<FlowReader<GValue>>> => {
          const reader: FlowReader<GValue> = await this.open(signal);

          return {
            ref: reader,
            close: (reason?: unknown): Promise<void> => {
              values.length = 0;
              readIndex = 0;
              minReadIndex = 0;
              pendingRead = undefined;
              return reader.close(reason);
            },
          };
        },
      );

    // list of cached values
    const values: CachedValue<GValue>[] = [];
    // index of the "next" read
    let readIndex: number = 0;
    // index of the first cached value relative to `readIndex`
    let minReadIndex: number = 0;
    // a promise based on the most recent `reader.read()`
    let pendingRead: Promise<GValue> | undefined;

    const removeExpiredValues = (): void => {
      const now: number = Date.now();
      while (values.length > 0 && values[0].expirationDate < now) {
        values.shift();
        minReadIndex++;
      }
    };

    return new ReadableFlow<GValue>(async (signal?: AbortSignal): Promise<FlowReader<GValue>> => {
      const sharedFlowReader: SharedResource<FlowReader<GValue>> =
        await sharedFlowReaderFactory.open(signal);

      let localReadIndex: number = 0;

      return new FlowReader<GValue>(
        async (signal: AbortSignal): Promise<GValue> => {
          removeExpiredValues();

          localReadIndex = Math.max(localReadIndex, minReadIndex);

          try {
            if (localReadIndex < readIndex) {
              // └> we are behind
              // => we have to return a cached value
              return values[localReadIndex - minReadIndex].value;
            }

            if (pendingRead === undefined) {
              // └> we are ahead
              // => we have to get and cache the next value
              pendingRead = sharedFlowReader.ref.read().then((value: GValue): GValue => {
                pendingRead = undefined;
                readIndex++;

                if (bufferSize > 0 && windowTime > 0) {
                  // └> if queueing is asked

                  // queue this value
                  values.push({
                    value,
                    expirationDate: Date.now() + windowTime,
                  });

                  // remove the first value if the `values` array's length exceed the max buffer size
                  if (values.length > bufferSize) {
                    values.shift();
                    minReadIndex++;
                  }
                } else {
                  minReadIndex = readIndex;
                }

                return value;
              });
            }

            return await rejectPromiseWhenSignalIsAborted(pendingRead, signal);
          } finally {
            localReadIndex++;
          }
        },
        (reason: unknown): Promise<void> => {
          return sharedFlowReader.close(reason);
        },
      );
    });
  }

  // Promise based return

  /**
   * Opens this `ReadableFlow`, waits until the first `read` resolves, and returns the result.
   */
  async first(signal?: AbortSignal): Promise<GValue> {
    await using reader: FlowReader<GValue> = await this.open(signal);

    using stack: DisposableStack = new DisposableStack();

    if (signal !== undefined) {
      stack.use(
        listen(signal, 'abort', (): void => {
          reader.close(signal.reason);
        }),
      );
    }

    return await reader.read();
  }

  /**
   * Opens this `ReadableFlow` and waits until it _completes_.
   * When this happens, it returns the last received value.
   */
  async last(signal?: AbortSignal): Promise<GValue> {
    await using reader: FlowReader<GValue> = await this.open(signal);

    using stack: DisposableStack = new DisposableStack();

    if (signal !== undefined) {
      stack.use(
        listen(signal, 'abort', (): void => {
          reader.close(signal.reason);
        }),
      );
    }

    while (true) {
      let value: GValue;
      let hasValue: boolean = false;

      try {
        value = await reader.read();
        hasValue = true;
      } catch (error: unknown) {
        return TerminalError.handle(error, (): GValue => {
          if (hasValue) {
            return value!;
          }
          throw new Error('Complete without sending a value.');
        });
      }
    }
  }

  /**
   * Opens this `ReadableFlow` and stores all received values until this stream _completes_.
   * When this happens, it returns all these received values.
   */
  async toArray(signal?: AbortSignal): Promise<GValue[]> {
    await using reader: FlowReader<GValue> = await this.open(signal);

    using stack: DisposableStack = new DisposableStack();

    if (signal !== undefined) {
      stack.use(
        listen(signal, 'abort', (): void => {
          reader.close(signal.reason);
        }),
      );
    }

    const values: GValue[] = [];

    while (true) {
      try {
        values.push(await reader.read());
      } catch (error: unknown) {
        return TerminalError.handle(error, (): GValue[] => {
          return values;
        });
      }
    }
  }

  // Cast to other kind of Streams

  toReadableStream(): ReadableStream<GValue> {
    let abortController: AbortController = new AbortController();
    let reader: FlowReader<GValue>;

    return new ReadableStream({
      start: async (): Promise<void> => {
        reader = await this.open(abortController.signal);
      },
      pull: async (controller: ReadableStreamDefaultController<GValue>): Promise<void> => {
        let value: GValue;

        try {
          value = await reader.read();
        } catch (error: unknown) {
          return TerminalError.handle(
            error,
            (): void => {
              controller.close();
            },
            (error: unknown): void => {
              controller.error(error);
            },
          );
        }

        controller.enqueue(value);
      },
      cancel: async (reason?: any): Promise<void> => {
        abortController.abort(reason);
        await reader.close(reason);
      },
    });
  }

  async *toAsyncGenerator(): AsyncGenerator<GValue, void, void> {
    await using reader: FlowReader<GValue> = await this.open();

    try {
      yield await reader.read();
    } catch (error: unknown) {
      return TerminalError.handle(error, (): void => {});
    }
  }

  [Symbol.asyncIterator](): AsyncGenerator<GValue, void, void> {
    return this.toAsyncGenerator();
  }
}
