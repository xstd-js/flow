import { isAsyncGeneratorFunction } from '@xstd/async-generator';
import { CompleteError } from '@xstd/custom-error';

/*--*/

export type FlowIterator<GValue> = Required<
  Pick<AsyncIterator<GValue, void, void>, 'next' | 'return' | 'throw'>
>;

export interface FlowFactory<GValue> {
  (signal: AbortSignal): FlowIterator<GValue>;
}

/*--*/

export class ActiveFlow<GValue>
  implements AsyncIterableIterator<GValue, void, void>, AsyncDisposable
{
  readonly #controller: AbortController;
  readonly #iterator: FlowIterator<GValue>;

  #queue: Promise<void>;

  /**
   * INFO:
   *  - a signal is necessary to abort the flow:
   *    └> if we don't have one, the flow may get stuck on a `next`,
   *       and because the `return` is queued, calling `return` won't "break" this flow.
   *  - we may provide a `null` as the input `signal`:
   *    └> if so, the _consumer_ **MUST** abort the flow using the `return` or `[Symbol.asyncDispose]` methods.
   *  - the flow could be aborted early from a `for await (const value of self.open(signal))` (by throwing or returning inside the loop):
   *    └> thus, we have to implement a `return` that aborts the flow.
   *  - we have to ensure consistent `try/catch/finally` blocks within the generator:
   *    └> only the _producer_ can throw/return, not the _consumer_.
   *    └> when aborting, make sure to abort the signal and exhaust the `next` calls until one throws or completes.
   */
  constructor(factory: FlowFactory<GValue>) {
    if (!isAsyncGeneratorFunction(factory)) {
      throw new TypeError('The factory must be an AsyncGenerator function.');
    }

    this.#controller = new AbortController();
    this.#iterator = factory(this.#controller.signal);
    this.#queue = Promise.resolve();
  }

  // #abort(reason: unknown): void {
  //   this.throw(reason).then(
  //     (): void => {
  //       reportError(new Error('iterator.throw() was not expected to fulfill.'));
  //     },
  //     (error: unknown): void => {
  //       if (error !== reason) {
  //         reportError(error);
  //       }
  //     },
  //   );
  // }

  next(): Promise<IteratorResult<GValue, void>> {
    return new Promise<IteratorResult<GValue, void>>((
      resolve: (value: IteratorResult<GValue, void>) => void,
      reject: (reason?: any) => void
    ): void => {
      this.#queue = this.#queue.then((): Promise<IteratorResult<GValue, void>> => {
        return this.#iterator.next().then(
          (result: IteratorResult<GValue, void>): IteratorResult<GValue, void> => {
            if (this.#controller.signal.aborted) {

            }

            if (result.done) {
              this.#controller.abort(new CompleteError());
            }

            return result;
          },
          (error: unknown): void => {
            this.#controller.abort(error);
          },
        );
      });
    });


    // console.log('next() called.');
    // try {
    //   const result: IteratorResult<GValue, void> = await this.#iterator.next();
    //
    //   if (result.done) {
    //     this.#controller.abort(new CompleteError());
    //   }
    //
    //   return result;
    // } catch (error: unknown) {
    //   this.#controller.abort(error);
    //
    //   throw error;
    // }
  }

  throw(error?: unknown): Promise<IteratorResult<GValue, void>> {
    console.log('throw() called.', error);
    this.#controller.abort(error);
    return this.#iterator.throw(error);
  }

  return(): Promise<IteratorResult<GValue, void>> {
    console.log('return() called.');
    this.#controller.abort(new CompleteError());
    return this.#iterator.return();
  }

  [Symbol.asyncIterator](): AsyncIterableIterator<GValue, void, void> {
    return this;
  }

  async [Symbol.asyncDispose](): Promise<void> {
    await this.return();
  }
}
