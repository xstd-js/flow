import { isAsyncGeneratorFunction } from '@xstd/async-generator';
import { CompleteError } from '@xstd/custom-error';

/*--*/

export type FlowIterator<GValue> = Required<
  Pick<AsyncIterator<GValue, void, void>, 'next' | 'throw'>
>;

export interface FlowFactory<GValue> {
  (signal: AbortSignal): FlowIterator<GValue>;
}

/*--*/

export class ActiveFlow<GValue>
  implements AsyncIterableIterator<GValue, void, void>, AsyncDisposable
{
  readonly #controller: AbortController;
  readonly #iterator: FlowIterator<GValue>;
  #abortPromise: Promise<void> | undefined;

  /**
   * INFO:
   *  - a signal is necessary to abort the flow:
   *    └> if we don't have one, the flow may get stuck on a `next`,
   *       and because the `return` is queued, calling `return` won't "break" this flow.
   *  - we may provide a `null` as the input `signal`:
   *    └> if so, the _consumer_ **MUST** abort the flow using the `return` or `[Symbol.asyncDispose]` methods.
   *  - the flow could be aborted early from a `for await (const value of self.open(signal))` (by throwing or returning inside the loop):
   *    └> thus, we have to implement a `return` that aborts the flow.
   *  - we have to ensure consistent `try/catch/finally` blocks within the generator:
   *    └> only the _producer_ can throw/return, not the _consumer_.
   *    └> when aborting, make sure to abort the signal and exhaust the `next` calls until one throws or completes.
   */
  constructor(factory: FlowFactory<GValue>, signal: AbortSignal | null) {
    if (!isAsyncGeneratorFunction(factory)) {
      throw new TypeError('The factory must be an AsyncGenerator function.');
    }

    this.#controller = new AbortController();
    this.#iterator = factory(this.#controller.signal);

    if (signal !== null) {
      if (signal.aborted) {
        this.abort(signal.reason);
      } else {
        signal.addEventListener(
          'abort',
          (): void => {
            this.abort(signal.reason);
          },
          {
            signal: this.#controller.signal,
          },
        );
      }
    }
  }

  abort(reason?: unknown): Promise<void> {
    if (this.#abortPromise === undefined) {
      this.#controller.abort(reason);

      this.#abortPromise = (async (): Promise<void> => {
        try {
          while (!(await this.#iterator.throw(reason)).done);
        } catch (error: unknown) {
          if (error !== this.#controller.signal.reason) {
            throw error;
          }
        }
      })();
    }

    return this.#abortPromise;
  }

  async next(): Promise<IteratorResult<GValue, void>> {
    try {
      const result: IteratorResult<GValue, void> = await this.#iterator.next();

      if (result.done) {
        this.#controller.abort(new CompleteError());
      }

      return result;
    } catch (error: unknown) {
      this.#controller.abort(error);

      throw error;
    }
  }

  async throw(error?: unknown): Promise<IteratorResult<GValue, void>> {
    await this.abort(error);
    return {
      done: true,
      value: undefined,
    };
  }

  async return(): Promise<IteratorResult<GValue, void>> {
    await this.abort();
    return {
      done: true,
      value: undefined,
    };
  }

  [Symbol.asyncIterator](): AsyncIterableIterator<GValue, void, void> {
    return this;
  }

  [Symbol.asyncDispose](): Promise<void> {
    return this.abort();
  }
}
