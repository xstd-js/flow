import { Flow } from '../../flow/flow.js';
import { FlowFactory } from '../../flow/types/flow-factory.js';
import { FlowIterator } from '../../flow/types/flow-iterator.js';

/*--*/

export type WritableFlowIterator<GValue> = FlowIterator<GValue, void, void>;

export type WritableFlowFactory<GValue> = FlowFactory<GValue, void, void>;

/*--*/

export class FlowWriter<GValue> extends Flow<GValue, void, void> {
  #initialized: boolean =
  override async next(value: GValue): Promise<IteratorResult<void, void>> {
    const result: IteratorResult<void, void> = await super.next(undefined as any);

    return super.next(value);
  }
}
