import { rejectPromiseWhenSignalIsAborted } from '@xstd/async-task';
import { ActiveFlow } from '../../active/active-flow.js';

/*------*/

interface PendingWriteShared<GType extends string> {
  readonly type: GType;
  readonly answer: PromiseWithResolvers<void>;
}

interface PendingWriteWrite<GValue> extends PendingWriteShared<'write'> {
  readonly value: GValue;
}

interface PendingWriteError extends PendingWriteShared<'error'> {
  readonly error: unknown;
}

interface PendingWriteComplete extends PendingWriteShared<'complete'> {}

type PendingWrite<GValue> = PendingWriteWrite<GValue> | PendingWriteError | PendingWriteComplete;

/*------*/

export class FlowAsyncBridge<GValue> {
  #pendingWrites: PendingWrite<GValue>[];
  #pendingRead: PromiseWithResolvers<void> | undefined;

  readonly #flow: ActiveFlow<GValue>;

  constructor(signal: AbortSignal) {
    this.#pendingWrites = [];

    const self: this = this;

    this.#flow = new ActiveFlow<GValue>(async function* (
      signal: AbortSignal,
    ): AsyncGenerator<GValue, void, void> {
      try {
        while (true) {
          signal.throwIfAborted();

          if (self.#pendingWrites.length > 0) {
            // └> the _read_ operation occurs **after** the _write_ operation

            const pendingWrite: PendingWrite<GValue> = self.#pendingWrites.shift()!;

            pendingWrite.answer.resolve();

            if (pendingWrite.type === 'write') {
              yield pendingWrite.value;
            } else if (pendingWrite.type === 'error') {
              throw pendingWrite.error;
            } else {
              return;
            }
          } else {
            // └> the _read_ operation occurs **before** the _write_ operation

            console.assert(self.#pendingRead === undefined);

            // create a promise for the reader that resolves on the next write
            // and wait for the next _write_ operation to resolve this _read_ operation
            await rejectPromiseWhenSignalIsAborted(
              (self.#pendingRead = Promise.withResolvers<void>()).promise,
              signal,
            );
          }
        }
      } catch (error: unknown) {
        while (self.#pendingWrites.length > 0) {
          self.#pendingWrites.shift()!.answer.reject(
            new Error('Flow threw.', {
              cause: error,
            }),
          );
        }
        throw error;
      } finally {
        while (self.#pendingWrites.length > 0) {
          self.#pendingWrites.shift()!.answer.reject(new Error('Flow ended.'));
        }
      }
    }, signal);
  }

  #resolvePendingRead(): void {
    if (this.#pendingRead !== undefined) {
      this.#pendingRead.resolve();
      this.#pendingRead = undefined;
    }
  }

  get flow(): ActiveFlow<GValue> {
    return this.#flow;
  }

  #appendPendingWrite(
    entry:
      | Omit<PendingWriteWrite<GValue>, 'answer'>
      | Omit<PendingWriteError, 'answer'>
      | Omit<PendingWriteComplete, 'answer'>,
  ): Promise<void> {
    const answer: PromiseWithResolvers<void> = Promise.withResolvers<void>();

    this.#pendingWrites.push({
      ...entry,
      answer,
    } as PendingWrite<GValue>);

    this.#resolvePendingRead();

    return answer.promise;
  }

  write(value: GValue): Promise<void> {
    return this.#appendPendingWrite({
      type: 'write',
      value,
    });
  }

  error(error?: unknown): Promise<void> {
    return this.#appendPendingWrite({
      type: 'error',
      error,
    });
  }

  complete(): Promise<void> {
    return this.#appendPendingWrite({
      type: 'complete',
    });
  }
}
