import { rejectPromiseWhenSignalIsAborted } from '@xstd/async-task';
import { FlowReader } from '../../read/reader/flow-reader.js';

/*------*/

interface PendingWriteShared<GType extends string> {
  readonly type: GType;
  readonly answer: PromiseWithResolvers<void>;
}

interface PendingWriteWrite<GValue> extends PendingWriteShared<'write'> {
  readonly value: GValue;
}

interface PendingWriteError extends PendingWriteShared<'error'> {
  readonly error: unknown;
}

interface PendingWriteComplete extends PendingWriteShared<'complete'> {}

type PendingWrite<GValue> = PendingWriteWrite<GValue> | PendingWriteError | PendingWriteComplete;

/*------*/

export interface FlowAsyncBridge<GValue> {
  write(value: GValue): Promise<void>;

  error(error?: unknown): Promise<void>;

  complete(): Promise<void>;
}

export type FlowAsyncBridgeResult<GValue> = [
  bridge: FlowAsyncBridge<GValue>,
  flow: FlowReader<GValue>,
];

/*------*/

export function flowAsyncBridge<GValue>(signal: AbortSignal): FlowAsyncBridgeResult<GValue> {
  let pendingWrites: PendingWrite<GValue>[] = [];
  let pendingRead: PromiseWithResolvers<void> | undefined;

  const rejectAllPendingWrites = (error: unknown): void => {
    while (pendingWrites.length > 0) {
      pendingWrites.shift()!.answer.reject(error);
    }
  };

  const appendPendingWrite = (
    entry:
      | Omit<PendingWriteWrite<GValue>, 'answer'>
      | Omit<PendingWriteError, 'answer'>
      | Omit<PendingWriteComplete, 'answer'>,
  ): Promise<void> => {
    const answer: PromiseWithResolvers<void> = Promise.withResolvers<void>();

    pendingWrites.push({
      ...entry,
      answer,
    } as PendingWrite<GValue>);

    if (pendingRead !== undefined) {
      pendingRead.resolve();
      pendingRead = undefined;
    }

    return answer.promise;
  };

  return [
    {
      write: (value: GValue): Promise<void> => {
        return appendPendingWrite({
          type: 'write',
          value,
        });
      },
      error: (error?: unknown): Promise<void> => {
        return appendPendingWrite({
          type: 'error',
          error,
        });
      },
      complete: (): Promise<void> => {
        return appendPendingWrite({
          type: 'complete',
        });
      },
    },
    new FlowReader<GValue>(async function* (
      signal: AbortSignal,
    ): AsyncGenerator<GValue, void, void> {
      try {
        while (true) {
          signal.throwIfAborted();

          if (pendingWrites.length > 0) {
            // └> the _read_ operation occurs **after** the _write_ operation

            const pendingWrite: PendingWrite<GValue> = pendingWrites.shift()!;

            pendingWrite.answer.resolve();

            if (pendingWrite.type === 'write') {
              yield pendingWrite.value;
            } else if (pendingWrite.type === 'error') {
              throw pendingWrite.error;
            } else {
              return;
            }
          } else {
            // └> the _read_ operation occurs **before** the _write_ operation

            console.assert(pendingRead === undefined);

            // create a promise for the reader that resolves on the next write
            // and wait for the next _write_ operation to resolve this _read_ operation
            await rejectPromiseWhenSignalIsAborted(
              (pendingRead = Promise.withResolvers<void>()).promise,
              signal,
            );
          }
        }
      } catch (error: unknown) {
        rejectAllPendingWrites(
          new Error('Flow threw.', {
            cause: error,
          }),
        );
        throw error;
      } finally {
        rejectAllPendingWrites(new Error('Flow returned.'));
      }
    }, signal),
  ];
}
